/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

//-------------------------------------------------------------------------------------------------
// Ray Query compute shader implementating the path tracer.

#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState {
  RtxState rtxState;
};

#include "globals.glsl"

PtPayload prd;
ShadowHitPayload shadow_payload;
ivec2 imageCoords;

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "traceray_rq.glsl"

#include "pathtrace.glsl"

#define FIREFLIES 1

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
#ifndef SWIZZLED
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(local_size_x = 32, local_size_y = 2) in;
#extension GL_EXT_shader_8bit_storage : enable  // Using uint_8 ...
ivec2 SampleSizzled() {
  // Sampling Swizzling
  // Convert 32x2 to 8x8, where the sampling will follow how invocation are done in a subgroup.
  // layout(local_size_x = 32, local_size_y = 2) in;
  ivec2 base = ivec2(gl_WorkGroupID.xy) * 8;
  ivec2 subset = ivec2(int(gl_LocalInvocationID.x) & 1, int(gl_LocalInvocationID.x) / 2);
  subset += gl_LocalInvocationID.x >= 16 ? ivec2(2, -8) : ivec2(0, 0);
  subset += ivec2(gl_LocalInvocationID.y * 4, 0);
  return base + subset;
}
#endif

//
//--------------------------------------------------------------------------------------------------
//
//

bool getStateFromCache(Ray ray, out State state, out float depth) {
  uvec4 gInfo = imageLoad(thisGbuffer, imageCoords);
  depth = uintBitsToFloat(gInfo.w);
  if(depth >= INFINITY)
    return false;
  state.position = ray.origin + ray.direction * depth;
  state.normal = decompress_unit_vec(gInfo.y);
  state.tangent = unpackTangent(state.normal, gInfo.x);
  state.bitangent = cross(state.normal, state.tangent);
  //CreateCoordinateSystem(state.normal, state.tangent, state.bitangent);
  state.texCoord = unpackUnorm2x16(gInfo.z);
  state.matID = gInfo.x >> 16;
  state.isEmitter = false;
  state.specularBounce = false;
  state.isSubsurface = false;
  state.ffnormal = dot(state.normal, ray.direction) <= 0.0 ? state.normal : -state.normal;

  // Filling material structures
  GetMaterialsAndTextures(state, ray);

  return true;
}

void main() {
  vec3 pixelColor = vec3(0.0);
  vec3 radiance = vec3(0.0);
  vec3 wi;
  vec3 bsdf;
  RadianceCacheStorage RC = thisRadianceCache[gl_GlobalInvocationID.x];
  imageCoords = RC.coords;
  prd.seed = tea(rtxState.size.x * imageCoords.y + imageCoords.x, rtxState.time);
  float depth;
  State state;
  Ray ray = raySpawn(imageCoords, rtxState.size);
  getStateFromCache(ray, state, depth);

  for(int i = 0; i < SAMPLES_PER_CACHE; i++) {
    radiance = IndirectSample(ray, state, depth, bsdf, wi);
    RC.Li[i] = /*packUnormYCbCr*/(radiance / bsdf);
    RC.wi[i] = compress_unit_vec(wi);
    pixelColor += radiance;
  }
  pixelColor /= SAMPLES_PER_CACHE;
  float lum = dot(pixelColor, vec3(0.212671f, 0.715160f, 0.072169f));
  if(lum > rtxState.fireflyClampThreshold) {
    pixelColor *= rtxState.fireflyClampThreshold / lum;
  }


  thisRadianceCache[gl_GlobalInvocationID.x] = RC;
  if(rtxState.frame > 0) {
    vec3 old_color = imageLoad(lastIndirectResultImage, imageCoords).xyz;
    vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));
    imageStore(thisIndirectResultImage, imageCoords, vec4(new_result, 1.0));
  } else {
    imageStore(thisIndirectResultImage, imageCoords, vec4(pixelColor, 1.0));
  }
}

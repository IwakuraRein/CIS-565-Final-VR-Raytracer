/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

//-------------------------------------------------------------------------------------------------
// Ray Query compute shader implementating the path tracer.

#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState {
  RtxState rtxState;
};

#include "globals.glsl"

PtPayload prd;
ShadowHitPayload shadow_payload;
ivec2 imageCoords;

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "traceray_rq.glsl"

#include "pathtrace.glsl"

#define FIREFLIES 1

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
#ifndef SWIZZLED
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(local_size_x = 32, local_size_y = 2) in;
#extension GL_EXT_shader_8bit_storage : enable  // Using uint_8 ...
ivec2 SampleSizzled() {
  // Sampling Swizzling
  // Convert 32x2 to 8x8, where the sampling will follow how invocation are done in a subgroup.
  // layout(local_size_x = 32, local_size_y = 2) in;
  ivec2 base = ivec2(gl_WorkGroupID.xy) * 8;
  ivec2 subset = ivec2(int(gl_LocalInvocationID.x) & 1, int(gl_LocalInvocationID.x) / 2);
  subset += gl_LocalInvocationID.x >= 16 ? ivec2(2, -8) : ivec2(0, 0);
  subset += ivec2(gl_LocalInvocationID.y * 4, 0);
  return base + subset;
}
#endif

//
//--------------------------------------------------------------------------------------------------
//
//
void main() {
  // uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

  ivec2 imageRes = rtxState.size;
  /*ivec2*/ imageCoords = ivec2(gl_GlobalInvocationID.xy * rtxState.descale);  //SampleSizzled();

  // Initialize the seed for the random number only once once
  // uvec2 s    = pcg2d(imageCoords * int(clockARB()));
  // prd.seed = s.x + s.y;
  // prd.seed = tea(rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, rtxState.frame * rtxState.spp);

  // the seed should be the same as direct stage cause they are using the same push constant value
  prd.seed = tea(rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, rtxState.time);
  //prd.seed = initRandom(uvec2(imageRes), gl_GlobalInvocationID.xy, rtxState.frame);

  float depth;
  // for(int smpl = 0; smpl < rtxState.spp; ++smpl) {
  Ray ray = raySpawn(imageCoords, ivec2(imageRes));

  uvec4 gInfo = imageLoad(thisGbuffer, imageCoords);
  depth = imageLoad(thisDirectResultImage, imageCoords).w;
  State state;
  state.position = ray.origin + ray.direction * depth;
  state.normal = decompress_unit_vec(gInfo.x);
  state.tangent = decompress_unit_vec(gInfo.y);
  state.bitangent = cross(state.normal, state.tangent);
  state.texCoord = unpackUnorm2x16(gInfo.z);
  state.matID = gInfo.w;
  state.isEmitter = false;
  state.specularBounce = false;
  state.isSubsurface = false;
  state.ffnormal = dot(state.normal, ray.direction) <= 0.0 ? state.normal : -state.normal;

  // Filling material structures
  GetMaterialsAndTextures(state, ray);

  // Color at vertices
  vec3 luminance = vec3(0);
  vec3 dir;
  vec3 radiance = IndirectSample(ray, state, depth, luminance, dir);
  luminance = radiance / luminance;

  // float lum = dot(radiance, vec3(0.212671f, 0.715160f, 0.072169f));
  // if(lum > rtxState.fireflyClampThreshold) {
  //   radiance *= rtxState.fireflyClampThreshold / lum;
  // }
  // }
  // pixelColor /= rtxState.spp;

  // Debug - Heatmap
  // if(rtxState.debugging_mode == eHeatmap) {
  //   uint64_t end = clockRealtimeEXT();
  //   float low = rtxState.minHeatmap;
  //   float high = rtxState.maxHeatmap;
  //   float val = clamp((float(end - start) - low) / (high - low), 0.0, 1.0);
  //   pixelColor = temperature(val);

  //   // Wrap & SM visualization
  //   // pixelColor = temperature(float(gl_SMIDNV) / float(gl_SMCountNV - 1)) * float(gl_WarpIDNV) / float(gl_WarpsPerSMNV - 1);
  // }

  // Saving pixel color
  float pdf;
    // Do accumulation over time
  for(int i = 0; i < rtxState.descale; i++) {
    for(int j = 0; j < rtxState.descale; j++) {
      ivec2 coords = imageCoords + ivec2(i, j);

      if((i != 0 || j != 0) && depth < INFINITY) {
        gInfo = imageLoad(thisGbuffer, coords);
        depth = imageLoad(thisDirectResultImage, coords).w;
        if(depth < INFINITY) {
          vec4 target = sceneCamera.projInverse * vec4((float(coords.x) + 0.5 - rtxState.size.x) / rtxState.size.x, (float(coords.y) + 0.5 - rtxState.size.y) / rtxState.size.y, 1, 1);
          ray.direction = (sceneCamera.viewInverse * vec4(normalize(target.xyz), 0)).xyz;
          // state.position = ray.origin + ray.direction * depth;
          state.normal = decompress_unit_vec(gInfo.x);
          state.tangent = decompress_unit_vec(gInfo.y);
          state.bitangent = cross(state.normal, state.tangent);
          state.texCoord = unpackUnorm2x16(gInfo.z);
          state.matID = gInfo.w;
          state.isEmitter = false;
          state.specularBounce = false;
          state.isSubsurface = false;
          state.ffnormal = dot(state.normal, ray.direction) <= 0.0 ? state.normal : -state.normal;

          GetMaterialsAndTextures(state, ray);
          vec3 f = Eval(state, -ray.direction, state.ffnormal, dir, pdf);
          if(pdf > 0)
            radiance = luminance * f * abs(dot(state.ffnormal, dir)) / pdf;
          else
            radiance = vec3(0);
        }
      }
      if(rtxState.frame > 0) {
        vec3 old_color = imageLoad(lastIndirectResultImage, coords).xyz;
        vec3 new_result = mix(old_color, radiance, 1.0f / float(rtxState.frame + 1));
        imageStore(thisIndirectResultImage, coords, vec4(new_result, depth));
      } else {
        imageStore(thisIndirectResultImage, coords, vec4(radiance, depth));
      }
    }
  }
}
